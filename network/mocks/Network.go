// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"

import types "github.com/projecteru2/core/types"

// Network is an autogenerated mock type for the Network type
type Network struct {
	mock.Mock
}

// ConnectToNetwork provides a mock function with given fields: ctx, containerID, networkID, ipv4
func (_m *Network) ConnectToNetwork(ctx context.Context, containerID string, networkID string, ipv4 string) error {
	ret := _m.Called(ctx, containerID, networkID, ipv4)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, containerID, networkID, ipv4)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DisconnectFromNetwork provides a mock function with given fields: ctx, containerID, networkID
func (_m *Network) DisconnectFromNetwork(ctx context.Context, containerID string, networkID string) error {
	ret := _m.Called(ctx, containerID, networkID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, containerID, networkID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListNetworks provides a mock function with given fields: ctx, driver
func (_m *Network) ListNetworks(ctx context.Context, driver string) ([]*types.Network, error) {
	ret := _m.Called(ctx, driver)

	var r0 []*types.Network
	if rf, ok := ret.Get(0).(func(context.Context, string) []*types.Network); ok {
		r0 = rf(ctx, driver)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Network)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, driver)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
