// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import io "io"
import mock "github.com/stretchr/testify/mock"
import types "github.com/projecteru2/core/types"

// Cluster is an autogenerated mock type for the Cluster type
type Cluster struct {
	mock.Mock
}

// AddNode provides a mock function with given fields: ctx, nodename, endpoint, podname, ca, cert, key, cpu, share, memory, labels
func (_m *Cluster) AddNode(ctx context.Context, nodename string, endpoint string, podname string, ca string, cert string, key string, cpu int, share int, memory int64, labels map[string]string) (*types.Node, error) {
	ret := _m.Called(ctx, nodename, endpoint, podname, ca, cert, key, cpu, share, memory, labels)

	var r0 *types.Node
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string, string, int, int, int64, map[string]string) *types.Node); ok {
		r0 = rf(ctx, nodename, endpoint, podname, ca, cert, key, cpu, share, memory, labels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, string, string, int, int, int64, map[string]string) error); ok {
		r1 = rf(ctx, nodename, endpoint, podname, ca, cert, key, cpu, share, memory, labels)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddPod provides a mock function with given fields: ctx, podname, favor, desc
func (_m *Cluster) AddPod(ctx context.Context, podname string, favor string, desc string) (*types.Pod, error) {
	ret := _m.Called(ctx, podname, favor, desc)

	var r0 *types.Pod
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *types.Pod); ok {
		r0 = rf(ctx, podname, favor, desc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Pod)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, podname, favor, desc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BuildImage provides a mock function with given fields: ctx, opts
func (_m *Cluster) BuildImage(ctx context.Context, opts *types.BuildOptions) (chan *types.BuildImageMessage, error) {
	ret := _m.Called(ctx, opts)

	var r0 chan *types.BuildImageMessage
	if rf, ok := ret.Get(0).(func(context.Context, *types.BuildOptions) chan *types.BuildImageMessage); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *types.BuildImageMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *types.BuildOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContainerDeployed provides a mock function with given fields: ctx, ID, appname, entrypoint, nodename, data
func (_m *Cluster) ContainerDeployed(ctx context.Context, ID string, appname string, entrypoint string, nodename string, data string) error {
	ret := _m.Called(ctx, ID, appname, entrypoint, nodename, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string) error); ok {
		r0 = rf(ctx, ID, appname, entrypoint, nodename, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ControlContainer provides a mock function with given fields: ctx, IDs, t
func (_m *Cluster) ControlContainer(ctx context.Context, IDs []string, t string) (chan *types.ControlContainerMessage, error) {
	ret := _m.Called(ctx, IDs, t)

	var r0 chan *types.ControlContainerMessage
	if rf, ok := ret.Get(0).(func(context.Context, []string, string) chan *types.ControlContainerMessage); ok {
		r0 = rf(ctx, IDs, t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *types.ControlContainerMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string, string) error); ok {
		r1 = rf(ctx, IDs, t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Copy provides a mock function with given fields: ctx, opts
func (_m *Cluster) Copy(ctx context.Context, opts *types.CopyOptions) (chan *types.CopyMessage, error) {
	ret := _m.Called(ctx, opts)

	var r0 chan *types.CopyMessage
	if rf, ok := ret.Get(0).(func(context.Context, *types.CopyOptions) chan *types.CopyMessage); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *types.CopyMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *types.CopyOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateContainer provides a mock function with given fields: ctx, opts
func (_m *Cluster) CreateContainer(ctx context.Context, opts *types.DeployOptions) (chan *types.CreateContainerMessage, error) {
	ret := _m.Called(ctx, opts)

	var r0 chan *types.CreateContainerMessage
	if rf, ok := ret.Get(0).(func(context.Context, *types.DeployOptions) chan *types.CreateContainerMessage); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *types.CreateContainerMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *types.DeployOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeployStatusStream provides a mock function with given fields: ctx, appname, entrypoint, nodename
func (_m *Cluster) DeployStatusStream(ctx context.Context, appname string, entrypoint string, nodename string) chan *types.DeployStatus {
	ret := _m.Called(ctx, appname, entrypoint, nodename)

	var r0 chan *types.DeployStatus
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) chan *types.DeployStatus); ok {
		r0 = rf(ctx, appname, entrypoint, nodename)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *types.DeployStatus)
		}
	}

	return r0
}

// GetContainer provides a mock function with given fields: ctx, ID
func (_m *Cluster) GetContainer(ctx context.Context, ID string) (*types.Container, error) {
	ret := _m.Called(ctx, ID)

	var r0 *types.Container
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Container); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Container)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContainers provides a mock function with given fields: ctx, IDs
func (_m *Cluster) GetContainers(ctx context.Context, IDs []string) ([]*types.Container, error) {
	ret := _m.Called(ctx, IDs)

	var r0 []*types.Container
	if rf, ok := ret.Get(0).(func(context.Context, []string) []*types.Container); ok {
		r0 = rf(ctx, IDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Container)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, IDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNode provides a mock function with given fields: ctx, podname, nodename
func (_m *Cluster) GetNode(ctx context.Context, podname string, nodename string) (*types.Node, error) {
	ret := _m.Called(ctx, podname, nodename)

	var r0 *types.Node
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *types.Node); ok {
		r0 = rf(ctx, podname, nodename)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, podname, nodename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodeByName provides a mock function with given fields: ctx, nodename
func (_m *Cluster) GetNodeByName(ctx context.Context, nodename string) (*types.Node, error) {
	ret := _m.Called(ctx, nodename)

	var r0 *types.Node
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Node); ok {
		r0 = rf(ctx, nodename)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, nodename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPod provides a mock function with given fields: ctx, podname
func (_m *Cluster) GetPod(ctx context.Context, podname string) (*types.Pod, error) {
	ret := _m.Called(ctx, podname)

	var r0 *types.Pod
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Pod); ok {
		r0 = rf(ctx, podname)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Pod)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, podname)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListContainers provides a mock function with given fields: ctx, opts
func (_m *Cluster) ListContainers(ctx context.Context, opts *types.ListContainersOptions) ([]*types.Container, error) {
	ret := _m.Called(ctx, opts)

	var r0 []*types.Container
	if rf, ok := ret.Get(0).(func(context.Context, *types.ListContainersOptions) []*types.Container); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Container)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *types.ListContainersOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNetworks provides a mock function with given fields: ctx, podname, driver
func (_m *Cluster) ListNetworks(ctx context.Context, podname string, driver string) ([]*types.Network, error) {
	ret := _m.Called(ctx, podname, driver)

	var r0 []*types.Network
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*types.Network); ok {
		r0 = rf(ctx, podname, driver)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Network)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, podname, driver)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNodeContainers provides a mock function with given fields: ctx, nodename
func (_m *Cluster) ListNodeContainers(ctx context.Context, nodename string) ([]*types.Container, error) {
	ret := _m.Called(ctx, nodename)

	var r0 []*types.Container
	if rf, ok := ret.Get(0).(func(context.Context, string) []*types.Container); ok {
		r0 = rf(ctx, nodename)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Container)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, nodename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPodNodes provides a mock function with given fields: ctx, podname, all
func (_m *Cluster) ListPodNodes(ctx context.Context, podname string, all bool) ([]*types.Node, error) {
	ret := _m.Called(ctx, podname, all)

	var r0 []*types.Node
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) []*types.Node); ok {
		r0 = rf(ctx, podname, all)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, podname, all)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPods provides a mock function with given fields: ctx
func (_m *Cluster) ListPods(ctx context.Context) ([]*types.Pod, error) {
	ret := _m.Called(ctx)

	var r0 []*types.Pod
	if rf, ok := ret.Get(0).(func(context.Context) []*types.Pod); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Pod)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PodResource provides a mock function with given fields: ctx, podname
func (_m *Cluster) PodResource(ctx context.Context, podname string) (*types.PodResource, error) {
	ret := _m.Called(ctx, podname)

	var r0 *types.PodResource
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.PodResource); ok {
		r0 = rf(ctx, podname)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.PodResource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, podname)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReallocResource provides a mock function with given fields: ctx, IDs, cpu, mem
func (_m *Cluster) ReallocResource(ctx context.Context, IDs []string, cpu float64, mem int64) (chan *types.ReallocResourceMessage, error) {
	ret := _m.Called(ctx, IDs, cpu, mem)

	var r0 chan *types.ReallocResourceMessage
	if rf, ok := ret.Get(0).(func(context.Context, []string, float64, int64) chan *types.ReallocResourceMessage); ok {
		r0 = rf(ctx, IDs, cpu, mem)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *types.ReallocResourceMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string, float64, int64) error); ok {
		r1 = rf(ctx, IDs, cpu, mem)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveContainer provides a mock function with given fields: ctx, IDs, force
func (_m *Cluster) RemoveContainer(ctx context.Context, IDs []string, force bool) (chan *types.RemoveContainerMessage, error) {
	ret := _m.Called(ctx, IDs, force)

	var r0 chan *types.RemoveContainerMessage
	if rf, ok := ret.Get(0).(func(context.Context, []string, bool) chan *types.RemoveContainerMessage); ok {
		r0 = rf(ctx, IDs, force)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *types.RemoveContainerMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string, bool) error); ok {
		r1 = rf(ctx, IDs, force)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveImage provides a mock function with given fields: ctx, podname, nodename, images, prune
func (_m *Cluster) RemoveImage(ctx context.Context, podname string, nodename string, images []string, prune bool) (chan *types.RemoveImageMessage, error) {
	ret := _m.Called(ctx, podname, nodename, images, prune)

	var r0 chan *types.RemoveImageMessage
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string, bool) chan *types.RemoveImageMessage); ok {
		r0 = rf(ctx, podname, nodename, images, prune)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *types.RemoveImageMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, []string, bool) error); ok {
		r1 = rf(ctx, podname, nodename, images, prune)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveNode provides a mock function with given fields: ctx, nodename, podname
func (_m *Cluster) RemoveNode(ctx context.Context, nodename string, podname string) (*types.Pod, error) {
	ret := _m.Called(ctx, nodename, podname)

	var r0 *types.Pod
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *types.Pod); ok {
		r0 = rf(ctx, nodename, podname)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Pod)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, nodename, podname)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemovePod provides a mock function with given fields: ctx, podname
func (_m *Cluster) RemovePod(ctx context.Context, podname string) error {
	ret := _m.Called(ctx, podname)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, podname)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReplaceContainer provides a mock function with given fields: ctx, opts
func (_m *Cluster) ReplaceContainer(ctx context.Context, opts *types.ReplaceOptions) (chan *types.ReplaceContainerMessage, error) {
	ret := _m.Called(ctx, opts)

	var r0 chan *types.ReplaceContainerMessage
	if rf, ok := ret.Get(0).(func(context.Context, *types.ReplaceOptions) chan *types.ReplaceContainerMessage); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *types.ReplaceContainerMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *types.ReplaceOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunAndWait provides a mock function with given fields: ctx, opts, stdin
func (_m *Cluster) RunAndWait(ctx context.Context, opts *types.DeployOptions, stdin io.ReadCloser) (chan *types.RunAndWaitMessage, error) {
	ret := _m.Called(ctx, opts, stdin)

	var r0 chan *types.RunAndWaitMessage
	if rf, ok := ret.Get(0).(func(context.Context, *types.DeployOptions, io.ReadCloser) chan *types.RunAndWaitMessage); ok {
		r0 = rf(ctx, opts, stdin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *types.RunAndWaitMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *types.DeployOptions, io.ReadCloser) error); ok {
		r1 = rf(ctx, opts, stdin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetNodeAvailable provides a mock function with given fields: ctx, podname, nodename, available
func (_m *Cluster) SetNodeAvailable(ctx context.Context, podname string, nodename string, available bool) (*types.Node, error) {
	ret := _m.Called(ctx, podname, nodename, available)

	var r0 *types.Node
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool) *types.Node); ok {
		r0 = rf(ctx, podname, nodename, available)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, bool) error); ok {
		r1 = rf(ctx, podname, nodename, available)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
