// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	enginetypes "github.com/projecteru2/core/engine/types"
	mock "github.com/stretchr/testify/mock"

	pluginstypes "github.com/projecteru2/core/resource3/plugins/types"

	types "github.com/projecteru2/core/types"
)

// Plugin is an autogenerated mock type for the Plugin type
type Plugin struct {
	mock.Mock
}

// AddNode provides a mock function with given fields: ctx, nodename, resource, info
func (_m *Plugin) AddNode(ctx context.Context, nodename string, resource *types.RawParams, info *enginetypes.Info) (*pluginstypes.AddNodeResponse, error) {
	ret := _m.Called(ctx, nodename, resource, info)

	var r0 *pluginstypes.AddNodeResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *types.RawParams, *enginetypes.Info) *pluginstypes.AddNodeResponse); ok {
		r0 = rf(ctx, nodename, resource, info)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pluginstypes.AddNodeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *types.RawParams, *enginetypes.Info) error); ok {
		r1 = rf(ctx, nodename, resource, info)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CalculateDeploy provides a mock function with given fields: ctx, nodename, deployCount, resourceRequest
func (_m *Plugin) CalculateDeploy(ctx context.Context, nodename string, deployCount int, resourceRequest *types.RawParams) (*pluginstypes.CalculateDeployResponse, error) {
	ret := _m.Called(ctx, nodename, deployCount, resourceRequest)

	var r0 *pluginstypes.CalculateDeployResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, int, *types.RawParams) *pluginstypes.CalculateDeployResponse); ok {
		r0 = rf(ctx, nodename, deployCount, resourceRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pluginstypes.CalculateDeployResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int, *types.RawParams) error); ok {
		r1 = rf(ctx, nodename, deployCount, resourceRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CalculateRealloc provides a mock function with given fields: ctx, nodename, resource, resourceRequest
func (_m *Plugin) CalculateRealloc(ctx context.Context, nodename string, resource *types.RawParams, resourceRequest *types.RawParams) (*pluginstypes.CalculateReallocResponse, error) {
	ret := _m.Called(ctx, nodename, resource, resourceRequest)

	var r0 *pluginstypes.CalculateReallocResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *types.RawParams, *types.RawParams) *pluginstypes.CalculateReallocResponse); ok {
		r0 = rf(ctx, nodename, resource, resourceRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pluginstypes.CalculateReallocResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *types.RawParams, *types.RawParams) error); ok {
		r1 = rf(ctx, nodename, resource, resourceRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CalculateRemap provides a mock function with given fields: ctx, nodename, workloadsResource
func (_m *Plugin) CalculateRemap(ctx context.Context, nodename string, workloadsResource map[string]*types.RawParams) (*pluginstypes.CalculateRemapResponse, error) {
	ret := _m.Called(ctx, nodename, workloadsResource)

	var r0 *pluginstypes.CalculateRemapResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]*types.RawParams) *pluginstypes.CalculateRemapResponse); ok {
		r0 = rf(ctx, nodename, workloadsResource)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pluginstypes.CalculateRemapResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]*types.RawParams) error); ok {
		r1 = rf(ctx, nodename, workloadsResource)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FixNodeResource provides a mock function with given fields: ctx, nodename, workloadsResource
func (_m *Plugin) FixNodeResource(ctx context.Context, nodename string, workloadsResource []*types.RawParams) (*pluginstypes.GetNodeResourceInfoResponse, error) {
	ret := _m.Called(ctx, nodename, workloadsResource)

	var r0 *pluginstypes.GetNodeResourceInfoResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, []*types.RawParams) *pluginstypes.GetNodeResourceInfoResponse); ok {
		r0 = rf(ctx, nodename, workloadsResource)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pluginstypes.GetNodeResourceInfoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, []*types.RawParams) error); ok {
		r1 = rf(ctx, nodename, workloadsResource)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetrics provides a mock function with given fields: ctx, podname, nodename
func (_m *Plugin) GetMetrics(ctx context.Context, podname string, nodename string) (*pluginstypes.GetMetricsResponse, error) {
	ret := _m.Called(ctx, podname, nodename)

	var r0 *pluginstypes.GetMetricsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *pluginstypes.GetMetricsResponse); ok {
		r0 = rf(ctx, podname, nodename)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pluginstypes.GetMetricsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, podname, nodename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetricsDescription provides a mock function with given fields: ctx
func (_m *Plugin) GetMetricsDescription(ctx context.Context) (*pluginstypes.GetMetricsDescriptionResponse, error) {
	ret := _m.Called(ctx)

	var r0 *pluginstypes.GetMetricsDescriptionResponse
	if rf, ok := ret.Get(0).(func(context.Context) *pluginstypes.GetMetricsDescriptionResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pluginstypes.GetMetricsDescriptionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMostIdleNode provides a mock function with given fields: ctx, nodenames
func (_m *Plugin) GetMostIdleNode(ctx context.Context, nodenames []string) (*pluginstypes.GetMostIdleNodeResponse, error) {
	ret := _m.Called(ctx, nodenames)

	var r0 *pluginstypes.GetMostIdleNodeResponse
	if rf, ok := ret.Get(0).(func(context.Context, []string) *pluginstypes.GetMostIdleNodeResponse); ok {
		r0 = rf(ctx, nodenames)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pluginstypes.GetMostIdleNodeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, nodenames)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodeResourceInfo provides a mock function with given fields: ctx, nodename, workloadsResource
func (_m *Plugin) GetNodeResourceInfo(ctx context.Context, nodename string, workloadsResource []*types.RawParams) (*pluginstypes.GetNodeResourceInfoResponse, error) {
	ret := _m.Called(ctx, nodename, workloadsResource)

	var r0 *pluginstypes.GetNodeResourceInfoResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, []*types.RawParams) *pluginstypes.GetNodeResourceInfoResponse); ok {
		r0 = rf(ctx, nodename, workloadsResource)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pluginstypes.GetNodeResourceInfoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, []*types.RawParams) error); ok {
		r1 = rf(ctx, nodename, workloadsResource)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodesDeployCapacity provides a mock function with given fields: ctx, nodenames, resource
func (_m *Plugin) GetNodesDeployCapacity(ctx context.Context, nodenames []string, resource *types.RawParams) (*pluginstypes.GetNodesDeployCapacityResponse, error) {
	ret := _m.Called(ctx, nodenames, resource)

	var r0 *pluginstypes.GetNodesDeployCapacityResponse
	if rf, ok := ret.Get(0).(func(context.Context, []string, *types.RawParams) *pluginstypes.GetNodesDeployCapacityResponse); ok {
		r0 = rf(ctx, nodenames, resource)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pluginstypes.GetNodesDeployCapacityResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string, *types.RawParams) error); ok {
		r1 = rf(ctx, nodenames, resource)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Name provides a mock function with given fields:
func (_m *Plugin) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RemoveNode provides a mock function with given fields: ctx, nodename
func (_m *Plugin) RemoveNode(ctx context.Context, nodename string) (*pluginstypes.RemoveNodeResponse, error) {
	ret := _m.Called(ctx, nodename)

	var r0 *pluginstypes.RemoveNodeResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) *pluginstypes.RemoveNodeResponse); ok {
		r0 = rf(ctx, nodename)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pluginstypes.RemoveNodeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, nodename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetNodeResourceCapacity provides a mock function with given fields: ctx, nodename, resource, resourceRequest, delta, incr
func (_m *Plugin) SetNodeResourceCapacity(ctx context.Context, nodename string, resource *types.RawParams, resourceRequest *types.RawParams, delta bool, incr bool) (*pluginstypes.SetNodeResourceCapacityResponse, error) {
	ret := _m.Called(ctx, nodename, resource, resourceRequest, delta, incr)

	var r0 *pluginstypes.SetNodeResourceCapacityResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *types.RawParams, *types.RawParams, bool, bool) *pluginstypes.SetNodeResourceCapacityResponse); ok {
		r0 = rf(ctx, nodename, resource, resourceRequest, delta, incr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pluginstypes.SetNodeResourceCapacityResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *types.RawParams, *types.RawParams, bool, bool) error); ok {
		r1 = rf(ctx, nodename, resource, resourceRequest, delta, incr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetNodeResourceInfo provides a mock function with given fields: ctx, nodename, capacity, usage
func (_m *Plugin) SetNodeResourceInfo(ctx context.Context, nodename string, capacity *types.RawParams, usage *types.RawParams) (*pluginstypes.SetNodeResourceInfoResponse, error) {
	ret := _m.Called(ctx, nodename, capacity, usage)

	var r0 *pluginstypes.SetNodeResourceInfoResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *types.RawParams, *types.RawParams) *pluginstypes.SetNodeResourceInfoResponse); ok {
		r0 = rf(ctx, nodename, capacity, usage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pluginstypes.SetNodeResourceInfoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *types.RawParams, *types.RawParams) error); ok {
		r1 = rf(ctx, nodename, capacity, usage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetNodeResourceUsage provides a mock function with given fields: ctx, nodename, resource, resourceRequest, workloadsResource, delta, incr
func (_m *Plugin) SetNodeResourceUsage(ctx context.Context, nodename string, resource *types.RawParams, resourceRequest *types.RawParams, workloadsResource []*types.RawParams, delta bool, incr bool) (*pluginstypes.SetNodeResourceUsageResponse, error) {
	ret := _m.Called(ctx, nodename, resource, resourceRequest, workloadsResource, delta, incr)

	var r0 *pluginstypes.SetNodeResourceUsageResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *types.RawParams, *types.RawParams, []*types.RawParams, bool, bool) *pluginstypes.SetNodeResourceUsageResponse); ok {
		r0 = rf(ctx, nodename, resource, resourceRequest, workloadsResource, delta, incr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pluginstypes.SetNodeResourceUsageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *types.RawParams, *types.RawParams, []*types.RawParams, bool, bool) error); ok {
		r1 = rf(ctx, nodename, resource, resourceRequest, workloadsResource, delta, incr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPlugin interface {
	mock.TestingT
	Cleanup(func())
}

// NewPlugin creates a new instance of Plugin. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPlugin(t mockConstructorTestingTNewPlugin) *Plugin {
	mock := &Plugin{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
