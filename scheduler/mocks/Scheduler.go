// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

import types "github.com/projecteru2/core/types"

// Scheduler is an autogenerated mock type for the Scheduler type
type Scheduler struct {
	mock.Mock
}

// CommonDivision provides a mock function with given fields: nodesInfo, need, total
func (_m *Scheduler) CommonDivision(nodesInfo []types.NodeInfo, need int, total int) ([]types.NodeInfo, error) {
	ret := _m.Called(nodesInfo, need, total)

	var r0 []types.NodeInfo
	if rf, ok := ret.Get(0).(func([]types.NodeInfo, int, int) []types.NodeInfo); ok {
		r0 = rf(nodesInfo, need, total)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.NodeInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]types.NodeInfo, int, int) error); ok {
		r1 = rf(nodesInfo, need, total)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EachDivision provides a mock function with given fields: nodesInfo, need, limit
func (_m *Scheduler) EachDivision(nodesInfo []types.NodeInfo, need int, limit int) ([]types.NodeInfo, error) {
	ret := _m.Called(nodesInfo, need, limit)

	var r0 []types.NodeInfo
	if rf, ok := ret.Get(0).(func([]types.NodeInfo, int, int) []types.NodeInfo); ok {
		r0 = rf(nodesInfo, need, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.NodeInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]types.NodeInfo, int, int) error); ok {
		r1 = rf(nodesInfo, need, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FillDivision provides a mock function with given fields: nodesInfo, need, limit
func (_m *Scheduler) FillDivision(nodesInfo []types.NodeInfo, need int, limit int) ([]types.NodeInfo, error) {
	ret := _m.Called(nodesInfo, need, limit)

	var r0 []types.NodeInfo
	if rf, ok := ret.Get(0).(func([]types.NodeInfo, int, int) []types.NodeInfo); ok {
		r0 = rf(nodesInfo, need, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.NodeInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]types.NodeInfo, int, int) error); ok {
		r1 = rf(nodesInfo, need, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MaxCPUIdleNode provides a mock function with given fields: nodes
func (_m *Scheduler) MaxCPUIdleNode(nodes []*types.Node) *types.Node {
	ret := _m.Called(nodes)

	var r0 *types.Node
	if rf, ok := ret.Get(0).(func([]*types.Node) *types.Node); ok {
		r0 = rf(nodes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Node)
		}
	}

	return r0
}

// SelectCPUNodes provides a mock function with given fields: nodesInfo, quota, memory
func (_m *Scheduler) SelectCPUNodes(nodesInfo []types.NodeInfo, quota float64, memory int64) ([]types.NodeInfo, map[string][]types.CPUMap, int, error) {
	ret := _m.Called(nodesInfo, quota, memory)

	var r0 []types.NodeInfo
	if rf, ok := ret.Get(0).(func([]types.NodeInfo, float64, int64) []types.NodeInfo); ok {
		r0 = rf(nodesInfo, quota, memory)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.NodeInfo)
		}
	}

	var r1 map[string][]types.CPUMap
	if rf, ok := ret.Get(1).(func([]types.NodeInfo, float64, int64) map[string][]types.CPUMap); ok {
		r1 = rf(nodesInfo, quota, memory)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string][]types.CPUMap)
		}
	}

	var r2 int
	if rf, ok := ret.Get(2).(func([]types.NodeInfo, float64, int64) int); ok {
		r2 = rf(nodesInfo, quota, memory)
	} else {
		r2 = ret.Get(2).(int)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func([]types.NodeInfo, float64, int64) error); ok {
		r3 = rf(nodesInfo, quota, memory)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// SelectMemoryNodes provides a mock function with given fields: nodesInfo, quota, memory
func (_m *Scheduler) SelectMemoryNodes(nodesInfo []types.NodeInfo, quota float64, memory int64) ([]types.NodeInfo, int, error) {
	ret := _m.Called(nodesInfo, quota, memory)

	var r0 []types.NodeInfo
	if rf, ok := ret.Get(0).(func([]types.NodeInfo, float64, int64) []types.NodeInfo); ok {
		r0 = rf(nodesInfo, quota, memory)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.NodeInfo)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func([]types.NodeInfo, float64, int64) int); ok {
		r1 = rf(nodesInfo, quota, memory)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func([]types.NodeInfo, float64, int64) error); ok {
		r2 = rf(nodesInfo, quota, memory)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
