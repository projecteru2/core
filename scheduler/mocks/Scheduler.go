// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	resourcestypes "github.com/projecteru2/core/resources/types"
	mock "github.com/stretchr/testify/mock"

	types "github.com/projecteru2/core/types"
)

// Scheduler is an autogenerated mock type for the Scheduler type
type Scheduler struct {
	mock.Mock
}

// MaxIdleNode provides a mock function with given fields: nodes
func (_m *Scheduler) MaxIdleNode(nodes []*types.Node) (*types.Node, error) {
	ret := _m.Called(nodes)

	var r0 *types.Node
	if rf, ok := ret.Get(0).(func([]*types.Node) *types.Node); ok {
		r0 = rf(nodes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]*types.Node) error); ok {
		r1 = rf(nodes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReselectCPUNodes provides a mock function with given fields: ctx, scheduleInfo, CPU, quota, memory
func (_m *Scheduler) ReselectCPUNodes(ctx context.Context, scheduleInfo resourcestypes.ScheduleInfo, CPU types.ResourceMap, quota float64, memory int64) (resourcestypes.ScheduleInfo, map[string][]types.ResourceMap, int, error) {
	ret := _m.Called(ctx, scheduleInfo, CPU, quota, memory)

	var r0 resourcestypes.ScheduleInfo
	if rf, ok := ret.Get(0).(func(context.Context, resourcestypes.ScheduleInfo, types.ResourceMap, float64, int64) resourcestypes.ScheduleInfo); ok {
		r0 = rf(ctx, scheduleInfo, CPU, quota, memory)
	} else {
		r0 = ret.Get(0).(resourcestypes.ScheduleInfo)
	}

	var r1 map[string][]types.ResourceMap
	if rf, ok := ret.Get(1).(func(context.Context, resourcestypes.ScheduleInfo, types.ResourceMap, float64, int64) map[string][]types.ResourceMap); ok {
		r1 = rf(ctx, scheduleInfo, CPU, quota, memory)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string][]types.ResourceMap)
		}
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(context.Context, resourcestypes.ScheduleInfo, types.ResourceMap, float64, int64) int); ok {
		r2 = rf(ctx, scheduleInfo, CPU, quota, memory)
	} else {
		r2 = ret.Get(2).(int)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, resourcestypes.ScheduleInfo, types.ResourceMap, float64, int64) error); ok {
		r3 = rf(ctx, scheduleInfo, CPU, quota, memory)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// ReselectVolumeNodes provides a mock function with given fields: ctx, scheduleInfo, old, request
func (_m *Scheduler) ReselectVolumeNodes(ctx context.Context, scheduleInfo resourcestypes.ScheduleInfo, old types.VolumePlan, request types.VolumeBindings) (resourcestypes.ScheduleInfo, map[string][]types.VolumePlan, int, error) {
	ret := _m.Called(ctx, scheduleInfo, old, request)

	var r0 resourcestypes.ScheduleInfo
	if rf, ok := ret.Get(0).(func(context.Context, resourcestypes.ScheduleInfo, types.VolumePlan, types.VolumeBindings) resourcestypes.ScheduleInfo); ok {
		r0 = rf(ctx, scheduleInfo, old, request)
	} else {
		r0 = ret.Get(0).(resourcestypes.ScheduleInfo)
	}

	var r1 map[string][]types.VolumePlan
	if rf, ok := ret.Get(1).(func(context.Context, resourcestypes.ScheduleInfo, types.VolumePlan, types.VolumeBindings) map[string][]types.VolumePlan); ok {
		r1 = rf(ctx, scheduleInfo, old, request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string][]types.VolumePlan)
		}
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(context.Context, resourcestypes.ScheduleInfo, types.VolumePlan, types.VolumeBindings) int); ok {
		r2 = rf(ctx, scheduleInfo, old, request)
	} else {
		r2 = ret.Get(2).(int)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, resourcestypes.ScheduleInfo, types.VolumePlan, types.VolumeBindings) error); ok {
		r3 = rf(ctx, scheduleInfo, old, request)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// SelectCPUNodes provides a mock function with given fields: ctx, scheduleInfos, quota, memory
func (_m *Scheduler) SelectCPUNodes(ctx context.Context, scheduleInfos []resourcestypes.ScheduleInfo, quota float64, memory int64) ([]resourcestypes.ScheduleInfo, map[string][]types.ResourceMap, int, error) {
	ret := _m.Called(ctx, scheduleInfos, quota, memory)

	var r0 []resourcestypes.ScheduleInfo
	if rf, ok := ret.Get(0).(func(context.Context, []resourcestypes.ScheduleInfo, float64, int64) []resourcestypes.ScheduleInfo); ok {
		r0 = rf(ctx, scheduleInfos, quota, memory)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]resourcestypes.ScheduleInfo)
		}
	}

	var r1 map[string][]types.ResourceMap
	if rf, ok := ret.Get(1).(func(context.Context, []resourcestypes.ScheduleInfo, float64, int64) map[string][]types.ResourceMap); ok {
		r1 = rf(ctx, scheduleInfos, quota, memory)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string][]types.ResourceMap)
		}
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(context.Context, []resourcestypes.ScheduleInfo, float64, int64) int); ok {
		r2 = rf(ctx, scheduleInfos, quota, memory)
	} else {
		r2 = ret.Get(2).(int)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, []resourcestypes.ScheduleInfo, float64, int64) error); ok {
		r3 = rf(ctx, scheduleInfos, quota, memory)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// SelectMemoryNodes provides a mock function with given fields: ctx, scheduleInfos, quota, memory
func (_m *Scheduler) SelectMemoryNodes(ctx context.Context, scheduleInfos []resourcestypes.ScheduleInfo, quota float64, memory int64) ([]resourcestypes.ScheduleInfo, int, error) {
	ret := _m.Called(ctx, scheduleInfos, quota, memory)

	var r0 []resourcestypes.ScheduleInfo
	if rf, ok := ret.Get(0).(func(context.Context, []resourcestypes.ScheduleInfo, float64, int64) []resourcestypes.ScheduleInfo); ok {
		r0 = rf(ctx, scheduleInfos, quota, memory)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]resourcestypes.ScheduleInfo)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, []resourcestypes.ScheduleInfo, float64, int64) int); ok {
		r1 = rf(ctx, scheduleInfos, quota, memory)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, []resourcestypes.ScheduleInfo, float64, int64) error); ok {
		r2 = rf(ctx, scheduleInfos, quota, memory)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SelectStorageNodes provides a mock function with given fields: ctx, scheduleInfos, storage
func (_m *Scheduler) SelectStorageNodes(ctx context.Context, scheduleInfos []resourcestypes.ScheduleInfo, storage int64) ([]resourcestypes.ScheduleInfo, int, error) {
	ret := _m.Called(ctx, scheduleInfos, storage)

	var r0 []resourcestypes.ScheduleInfo
	if rf, ok := ret.Get(0).(func(context.Context, []resourcestypes.ScheduleInfo, int64) []resourcestypes.ScheduleInfo); ok {
		r0 = rf(ctx, scheduleInfos, storage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]resourcestypes.ScheduleInfo)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, []resourcestypes.ScheduleInfo, int64) int); ok {
		r1 = rf(ctx, scheduleInfos, storage)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, []resourcestypes.ScheduleInfo, int64) error); ok {
		r2 = rf(ctx, scheduleInfos, storage)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SelectVolumeNodes provides a mock function with given fields: ctx, scheduleInfo, vbs
func (_m *Scheduler) SelectVolumeNodes(ctx context.Context, scheduleInfo []resourcestypes.ScheduleInfo, vbs types.VolumeBindings) ([]resourcestypes.ScheduleInfo, map[string][]types.VolumePlan, int, error) {
	ret := _m.Called(ctx, scheduleInfo, vbs)

	var r0 []resourcestypes.ScheduleInfo
	if rf, ok := ret.Get(0).(func(context.Context, []resourcestypes.ScheduleInfo, types.VolumeBindings) []resourcestypes.ScheduleInfo); ok {
		r0 = rf(ctx, scheduleInfo, vbs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]resourcestypes.ScheduleInfo)
		}
	}

	var r1 map[string][]types.VolumePlan
	if rf, ok := ret.Get(1).(func(context.Context, []resourcestypes.ScheduleInfo, types.VolumeBindings) map[string][]types.VolumePlan); ok {
		r1 = rf(ctx, scheduleInfo, vbs)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string][]types.VolumePlan)
		}
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(context.Context, []resourcestypes.ScheduleInfo, types.VolumeBindings) int); ok {
		r2 = rf(ctx, scheduleInfo, vbs)
	} else {
		r2 = ret.Get(2).(int)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, []resourcestypes.ScheduleInfo, types.VolumeBindings) error); ok {
		r3 = rf(ctx, scheduleInfo, vbs)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}
