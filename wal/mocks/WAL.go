// Code generated by mockery v2.3.0. DO NOT EDIT.

package mocks

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"

	wal "github.com/projecteru2/core/wal"
)

// WAL is an autogenerated mock type for the WAL type
type WAL struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *WAL) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Log provides a mock function with given fields: _a0, _a1
func (_m *WAL) Log(_a0 string, _a1 interface{}) (wal.Commit, error) {
	ret := _m.Called(_a0, _a1)

	var r0 wal.Commit
	if rf, ok := ret.Get(0).(func(string, interface{}) wal.Commit); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(wal.Commit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Open provides a mock function with given fields: _a0, _a1
func (_m *WAL) Open(_a0 string, _a1 time.Duration) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, time.Duration) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Recover provides a mock function with given fields: _a0
func (_m *WAL) Recover(_a0 context.Context) {
	_m.Called(_a0)
}

// Register provides a mock function with given fields: _a0
func (_m *WAL) Register(_a0 wal.EventHandler) {
	_m.Called(_a0)
}
